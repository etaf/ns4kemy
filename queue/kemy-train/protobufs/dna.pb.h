// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dna.proto

#ifndef PROTOBUF_dna_2eproto__INCLUDED
#define PROTOBUF_dna_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KemyBuffers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dna_2eproto();
void protobuf_AssignDesc_dna_2eproto();
void protobuf_ShutdownFile_dna_2eproto();

class WhiskerTree;
class MemoryRange;
class MemoryRange_Array;
class Memory;
class Whisker;
class OptimizationSetting;
class OptimizationSettings;
class Range;
class ConfigRange;
class NetConfig;

// ===================================================================

class WhiskerTree : public ::google::protobuf::Message {
 public:
  WhiskerTree();
  virtual ~WhiskerTree();
  
  WhiskerTree(const WhiskerTree& from);
  
  inline WhiskerTree& operator=(const WhiskerTree& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiskerTree& default_instance();
  
  void Swap(WhiskerTree* other);
  
  // implements Message ----------------------------------------------
  
  WhiskerTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhiskerTree& from);
  void MergeFrom(const WhiskerTree& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .KemyBuffers.MemoryRange domain = 1;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 1;
  inline const ::KemyBuffers::MemoryRange& domain() const;
  inline ::KemyBuffers::MemoryRange* mutable_domain();
  inline ::KemyBuffers::MemoryRange* release_domain();
  
  // repeated .KemyBuffers.WhiskerTree children = 2;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 2;
  inline const ::KemyBuffers::WhiskerTree& children(int index) const;
  inline ::KemyBuffers::WhiskerTree* mutable_children(int index);
  inline ::KemyBuffers::WhiskerTree* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >*
      mutable_children();
  
  // optional .KemyBuffers.Whisker leaf = 3;
  inline bool has_leaf() const;
  inline void clear_leaf();
  static const int kLeafFieldNumber = 3;
  inline const ::KemyBuffers::Whisker& leaf() const;
  inline ::KemyBuffers::Whisker* mutable_leaf();
  inline ::KemyBuffers::Whisker* release_leaf();
  
  // optional .KemyBuffers.ConfigRange config = 4;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 4;
  inline const ::KemyBuffers::ConfigRange& config() const;
  inline ::KemyBuffers::ConfigRange* mutable_config();
  inline ::KemyBuffers::ConfigRange* release_config();
  
  // optional .KemyBuffers.OptimizationSettings optimizer = 5;
  inline bool has_optimizer() const;
  inline void clear_optimizer();
  static const int kOptimizerFieldNumber = 5;
  inline const ::KemyBuffers::OptimizationSettings& optimizer() const;
  inline ::KemyBuffers::OptimizationSettings* mutable_optimizer();
  inline ::KemyBuffers::OptimizationSettings* release_optimizer();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.WhiskerTree)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_leaf();
  inline void clear_has_leaf();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_optimizer();
  inline void clear_has_optimizer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::KemyBuffers::MemoryRange* domain_;
  ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree > children_;
  ::KemyBuffers::Whisker* leaf_;
  ::KemyBuffers::ConfigRange* config_;
  ::KemyBuffers::OptimizationSettings* optimizer_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static WhiskerTree* default_instance_;
};
// -------------------------------------------------------------------

class MemoryRange_Array : public ::google::protobuf::Message {
 public:
  MemoryRange_Array();
  virtual ~MemoryRange_Array();
  
  MemoryRange_Array(const MemoryRange_Array& from);
  
  inline MemoryRange_Array& operator=(const MemoryRange_Array& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryRange_Array& default_instance();
  
  void Swap(MemoryRange_Array* other);
  
  // implements Message ----------------------------------------------
  
  MemoryRange_Array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryRange_Array& from);
  void MergeFrom(const MemoryRange_Array& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double element = 10;
  inline int element_size() const;
  inline void clear_element();
  static const int kElementFieldNumber = 10;
  inline double element(int index) const;
  inline void set_element(int index, double value);
  inline void add_element(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      element() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_element();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.MemoryRange.Array)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > element_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryRange_Array* default_instance_;
};
// -------------------------------------------------------------------

class MemoryRange : public ::google::protobuf::Message {
 public:
  MemoryRange();
  virtual ~MemoryRange();
  
  MemoryRange(const MemoryRange& from);
  
  inline MemoryRange& operator=(const MemoryRange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryRange& default_instance();
  
  void Swap(MemoryRange* other);
  
  // implements Message ----------------------------------------------
  
  MemoryRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryRange& from);
  void MergeFrom(const MemoryRange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MemoryRange_Array Array;
  
  // accessors -------------------------------------------------------
  
  // optional .KemyBuffers.Memory lower = 11;
  inline bool has_lower() const;
  inline void clear_lower();
  static const int kLowerFieldNumber = 11;
  inline const ::KemyBuffers::Memory& lower() const;
  inline ::KemyBuffers::Memory* mutable_lower();
  inline ::KemyBuffers::Memory* release_lower();
  
  // optional .KemyBuffers.Memory upper = 12;
  inline bool has_upper() const;
  inline void clear_upper();
  static const int kUpperFieldNumber = 12;
  inline const ::KemyBuffers::Memory& upper() const;
  inline ::KemyBuffers::Memory* mutable_upper();
  inline ::KemyBuffers::Memory* release_upper();
  
  // optional uint32 count = 13;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 13;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // repeated .KemyBuffers.MemoryRange.Array arrs = 14;
  inline int arrs_size() const;
  inline void clear_arrs();
  static const int kArrsFieldNumber = 14;
  inline const ::KemyBuffers::MemoryRange_Array& arrs(int index) const;
  inline ::KemyBuffers::MemoryRange_Array* mutable_arrs(int index);
  inline ::KemyBuffers::MemoryRange_Array* add_arrs();
  inline const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::MemoryRange_Array >&
      arrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::KemyBuffers::MemoryRange_Array >*
      mutable_arrs();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.MemoryRange)
 private:
  inline void set_has_lower();
  inline void clear_has_lower();
  inline void set_has_upper();
  inline void clear_has_upper();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::KemyBuffers::Memory* lower_;
  ::KemyBuffers::Memory* upper_;
  ::google::protobuf::RepeatedPtrField< ::KemyBuffers::MemoryRange_Array > arrs_;
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryRange* default_instance_;
};
// -------------------------------------------------------------------

class Memory : public ::google::protobuf::Message {
 public:
  Memory();
  virtual ~Memory();
  
  Memory(const Memory& from);
  
  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Memory& default_instance();
  
  void Swap(Memory* other);
  
  // implements Message ----------------------------------------------
  
  Memory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double ewma_qlen = 21;
  inline bool has_ewma_qlen() const;
  inline void clear_ewma_qlen();
  static const int kEwmaQlenFieldNumber = 21;
  inline double ewma_qlen() const;
  inline void set_ewma_qlen(double value);
  
  // optional double ewma_arrival_rate = 22;
  inline bool has_ewma_arrival_rate() const;
  inline void clear_ewma_arrival_rate();
  static const int kEwmaArrivalRateFieldNumber = 22;
  inline double ewma_arrival_rate() const;
  inline void set_ewma_arrival_rate(double value);
  
  // optional double ewma_depart_rate = 23;
  inline bool has_ewma_depart_rate() const;
  inline void clear_ewma_depart_rate();
  static const int kEwmaDepartRateFieldNumber = 23;
  inline double ewma_depart_rate() const;
  inline void set_ewma_depart_rate(double value);
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.Memory)
 private:
  inline void set_has_ewma_qlen();
  inline void clear_has_ewma_qlen();
  inline void set_has_ewma_arrival_rate();
  inline void clear_has_ewma_arrival_rate();
  inline void set_has_ewma_depart_rate();
  inline void clear_has_ewma_depart_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double ewma_qlen_;
  double ewma_arrival_rate_;
  double ewma_depart_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static Memory* default_instance_;
};
// -------------------------------------------------------------------

class Whisker : public ::google::protobuf::Message {
 public:
  Whisker();
  virtual ~Whisker();
  
  Whisker(const Whisker& from);
  
  inline Whisker& operator=(const Whisker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Whisker& default_instance();
  
  void Swap(Whisker* other);
  
  // implements Message ----------------------------------------------
  
  Whisker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Whisker& from);
  void MergeFrom(const Whisker& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 generation = 31;
  inline bool has_generation() const;
  inline void clear_generation();
  static const int kGenerationFieldNumber = 31;
  inline ::google::protobuf::uint32 generation() const;
  inline void set_generation(::google::protobuf::uint32 value);
  
  // optional bool drop_f = 32;
  inline bool has_drop_f() const;
  inline void clear_drop_f();
  static const int kDropFFieldNumber = 32;
  inline bool drop_f() const;
  inline void set_drop_f(bool value);
  
  // optional .KemyBuffers.MemoryRange domain = 33;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 33;
  inline const ::KemyBuffers::MemoryRange& domain() const;
  inline ::KemyBuffers::MemoryRange* mutable_domain();
  inline ::KemyBuffers::MemoryRange* release_domain();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.Whisker)
 private:
  inline void set_has_generation();
  inline void clear_has_generation();
  inline void set_has_drop_f();
  inline void clear_has_drop_f();
  inline void set_has_domain();
  inline void clear_has_domain();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 generation_;
  bool drop_f_;
  ::KemyBuffers::MemoryRange* domain_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static Whisker* default_instance_;
};
// -------------------------------------------------------------------

class OptimizationSetting : public ::google::protobuf::Message {
 public:
  OptimizationSetting();
  virtual ~OptimizationSetting();
  
  OptimizationSetting(const OptimizationSetting& from);
  
  inline OptimizationSetting& operator=(const OptimizationSetting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizationSetting& default_instance();
  
  void Swap(OptimizationSetting* other);
  
  // implements Message ----------------------------------------------
  
  OptimizationSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizationSetting& from);
  void MergeFrom(const OptimizationSetting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double min_value = 41;
  inline bool has_min_value() const;
  inline void clear_min_value();
  static const int kMinValueFieldNumber = 41;
  inline double min_value() const;
  inline void set_min_value(double value);
  
  // optional double max_value = 42;
  inline bool has_max_value() const;
  inline void clear_max_value();
  static const int kMaxValueFieldNumber = 42;
  inline double max_value() const;
  inline void set_max_value(double value);
  
  // optional double min_change = 43;
  inline bool has_min_change() const;
  inline void clear_min_change();
  static const int kMinChangeFieldNumber = 43;
  inline double min_change() const;
  inline void set_min_change(double value);
  
  // optional double max_change = 44;
  inline bool has_max_change() const;
  inline void clear_max_change();
  static const int kMaxChangeFieldNumber = 44;
  inline double max_change() const;
  inline void set_max_change(double value);
  
  // optional double multiplier = 45;
  inline bool has_multiplier() const;
  inline void clear_multiplier();
  static const int kMultiplierFieldNumber = 45;
  inline double multiplier() const;
  inline void set_multiplier(double value);
  
  // optional double default_value = 46;
  inline bool has_default_value() const;
  inline void clear_default_value();
  static const int kDefaultValueFieldNumber = 46;
  inline double default_value() const;
  inline void set_default_value(double value);
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.OptimizationSetting)
 private:
  inline void set_has_min_value();
  inline void clear_has_min_value();
  inline void set_has_max_value();
  inline void clear_has_max_value();
  inline void set_has_min_change();
  inline void clear_has_min_change();
  inline void set_has_max_change();
  inline void clear_has_max_change();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();
  inline void set_has_default_value();
  inline void clear_has_default_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double min_value_;
  double max_value_;
  double min_change_;
  double max_change_;
  double multiplier_;
  double default_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static OptimizationSetting* default_instance_;
};
// -------------------------------------------------------------------

class OptimizationSettings : public ::google::protobuf::Message {
 public:
  OptimizationSettings();
  virtual ~OptimizationSettings();
  
  OptimizationSettings(const OptimizationSettings& from);
  
  inline OptimizationSettings& operator=(const OptimizationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizationSettings& default_instance();
  
  void Swap(OptimizationSettings* other);
  
  // implements Message ----------------------------------------------
  
  OptimizationSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptimizationSettings& from);
  void MergeFrom(const OptimizationSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .KemyBuffers.OptimizationSetting drop_f = 51;
  inline bool has_drop_f() const;
  inline void clear_drop_f();
  static const int kDropFFieldNumber = 51;
  inline const ::KemyBuffers::OptimizationSetting& drop_f() const;
  inline ::KemyBuffers::OptimizationSetting* mutable_drop_f();
  inline ::KemyBuffers::OptimizationSetting* release_drop_f();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.OptimizationSettings)
 private:
  inline void set_has_drop_f();
  inline void clear_has_drop_f();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::KemyBuffers::OptimizationSetting* drop_f_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static OptimizationSettings* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();
  
  Range(const Range& from);
  
  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();
  
  void Swap(Range* other);
  
  // implements Message ----------------------------------------------
  
  Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double low = 61;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 61;
  inline double low() const;
  inline void set_low(double value);
  
  // optional double high = 62;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 62;
  inline double high() const;
  inline void set_high(double value);
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.Range)
 private:
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_high();
  inline void clear_has_high();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double low_;
  double high_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class ConfigRange : public ::google::protobuf::Message {
 public:
  ConfigRange();
  virtual ~ConfigRange();
  
  ConfigRange(const ConfigRange& from);
  
  inline ConfigRange& operator=(const ConfigRange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRange& default_instance();
  
  void Swap(ConfigRange* other);
  
  // implements Message ----------------------------------------------
  
  ConfigRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigRange& from);
  void MergeFrom(const ConfigRange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .KemyBuffers.Range num_senders = 71;
  inline bool has_num_senders() const;
  inline void clear_num_senders();
  static const int kNumSendersFieldNumber = 71;
  inline const ::KemyBuffers::Range& num_senders() const;
  inline ::KemyBuffers::Range* mutable_num_senders();
  inline ::KemyBuffers::Range* release_num_senders();
  
  // optional .KemyBuffers.Range bottle_bw = 72;
  inline bool has_bottle_bw() const;
  inline void clear_bottle_bw();
  static const int kBottleBwFieldNumber = 72;
  inline const ::KemyBuffers::Range& bottle_bw() const;
  inline ::KemyBuffers::Range* mutable_bottle_bw();
  inline ::KemyBuffers::Range* release_bottle_bw();
  
  // optional .KemyBuffers.Range bottle_single_delay = 73;
  inline bool has_bottle_single_delay() const;
  inline void clear_bottle_single_delay();
  static const int kBottleSingleDelayFieldNumber = 73;
  inline const ::KemyBuffers::Range& bottle_single_delay() const;
  inline ::KemyBuffers::Range* mutable_bottle_single_delay();
  inline ::KemyBuffers::Range* release_bottle_single_delay();
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.ConfigRange)
 private:
  inline void set_has_num_senders();
  inline void clear_has_num_senders();
  inline void set_has_bottle_bw();
  inline void clear_has_bottle_bw();
  inline void set_has_bottle_single_delay();
  inline void clear_has_bottle_single_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::KemyBuffers::Range* num_senders_;
  ::KemyBuffers::Range* bottle_bw_;
  ::KemyBuffers::Range* bottle_single_delay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static ConfigRange* default_instance_;
};
// -------------------------------------------------------------------

class NetConfig : public ::google::protobuf::Message {
 public:
  NetConfig();
  virtual ~NetConfig();
  
  NetConfig(const NetConfig& from);
  
  inline NetConfig& operator=(const NetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig& default_instance();
  
  void Swap(NetConfig* other);
  
  // implements Message ----------------------------------------------
  
  NetConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig& from);
  void MergeFrom(const NetConfig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 num_senders = 1;
  inline bool has_num_senders() const;
  inline void clear_num_senders();
  static const int kNumSendersFieldNumber = 1;
  inline ::google::protobuf::uint32 num_senders() const;
  inline void set_num_senders(::google::protobuf::uint32 value);
  
  // optional double bottle_bw = 2;
  inline bool has_bottle_bw() const;
  inline void clear_bottle_bw();
  static const int kBottleBwFieldNumber = 2;
  inline double bottle_bw() const;
  inline void set_bottle_bw(double value);
  
  // optional double bottle_single_delay = 3;
  inline bool has_bottle_single_delay() const;
  inline void clear_bottle_single_delay();
  static const int kBottleSingleDelayFieldNumber = 3;
  inline double bottle_single_delay() const;
  inline void set_bottle_single_delay(double value);
  
  // @@protoc_insertion_point(class_scope:KemyBuffers.NetConfig)
 private:
  inline void set_has_num_senders();
  inline void clear_has_num_senders();
  inline void set_has_bottle_bw();
  inline void clear_has_bottle_bw();
  inline void set_has_bottle_single_delay();
  inline void clear_has_bottle_single_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double bottle_bw_;
  double bottle_single_delay_;
  ::google::protobuf::uint32 num_senders_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dna_2eproto();
  friend void protobuf_AssignDesc_dna_2eproto();
  friend void protobuf_ShutdownFile_dna_2eproto();
  
  void InitAsDefaultInstance();
  static NetConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// WhiskerTree

// optional .KemyBuffers.MemoryRange domain = 1;
inline bool WhiskerTree::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiskerTree::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiskerTree::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiskerTree::clear_domain() {
  if (domain_ != NULL) domain_->::KemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
inline const ::KemyBuffers::MemoryRange& WhiskerTree::domain() const {
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
inline ::KemyBuffers::MemoryRange* WhiskerTree::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) domain_ = new ::KemyBuffers::MemoryRange;
  return domain_;
}
inline ::KemyBuffers::MemoryRange* WhiskerTree::release_domain() {
  clear_has_domain();
  ::KemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}

// repeated .KemyBuffers.WhiskerTree children = 2;
inline int WhiskerTree::children_size() const {
  return children_.size();
}
inline void WhiskerTree::clear_children() {
  children_.Clear();
}
inline const ::KemyBuffers::WhiskerTree& WhiskerTree::children(int index) const {
  return children_.Get(index);
}
inline ::KemyBuffers::WhiskerTree* WhiskerTree::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::KemyBuffers::WhiskerTree* WhiskerTree::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >&
WhiskerTree::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >*
WhiskerTree::mutable_children() {
  return &children_;
}

// optional .KemyBuffers.Whisker leaf = 3;
inline bool WhiskerTree::has_leaf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhiskerTree::set_has_leaf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhiskerTree::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhiskerTree::clear_leaf() {
  if (leaf_ != NULL) leaf_->::KemyBuffers::Whisker::Clear();
  clear_has_leaf();
}
inline const ::KemyBuffers::Whisker& WhiskerTree::leaf() const {
  return leaf_ != NULL ? *leaf_ : *default_instance_->leaf_;
}
inline ::KemyBuffers::Whisker* WhiskerTree::mutable_leaf() {
  set_has_leaf();
  if (leaf_ == NULL) leaf_ = new ::KemyBuffers::Whisker;
  return leaf_;
}
inline ::KemyBuffers::Whisker* WhiskerTree::release_leaf() {
  clear_has_leaf();
  ::KemyBuffers::Whisker* temp = leaf_;
  leaf_ = NULL;
  return temp;
}

// optional .KemyBuffers.ConfigRange config = 4;
inline bool WhiskerTree::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhiskerTree::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhiskerTree::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhiskerTree::clear_config() {
  if (config_ != NULL) config_->::KemyBuffers::ConfigRange::Clear();
  clear_has_config();
}
inline const ::KemyBuffers::ConfigRange& WhiskerTree::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::KemyBuffers::ConfigRange* WhiskerTree::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::KemyBuffers::ConfigRange;
  return config_;
}
inline ::KemyBuffers::ConfigRange* WhiskerTree::release_config() {
  clear_has_config();
  ::KemyBuffers::ConfigRange* temp = config_;
  config_ = NULL;
  return temp;
}

// optional .KemyBuffers.OptimizationSettings optimizer = 5;
inline bool WhiskerTree::has_optimizer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WhiskerTree::set_has_optimizer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WhiskerTree::clear_has_optimizer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WhiskerTree::clear_optimizer() {
  if (optimizer_ != NULL) optimizer_->::KemyBuffers::OptimizationSettings::Clear();
  clear_has_optimizer();
}
inline const ::KemyBuffers::OptimizationSettings& WhiskerTree::optimizer() const {
  return optimizer_ != NULL ? *optimizer_ : *default_instance_->optimizer_;
}
inline ::KemyBuffers::OptimizationSettings* WhiskerTree::mutable_optimizer() {
  set_has_optimizer();
  if (optimizer_ == NULL) optimizer_ = new ::KemyBuffers::OptimizationSettings;
  return optimizer_;
}
inline ::KemyBuffers::OptimizationSettings* WhiskerTree::release_optimizer() {
  clear_has_optimizer();
  ::KemyBuffers::OptimizationSettings* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MemoryRange_Array

// repeated double element = 10;
inline int MemoryRange_Array::element_size() const {
  return element_.size();
}
inline void MemoryRange_Array::clear_element() {
  element_.Clear();
}
inline double MemoryRange_Array::element(int index) const {
  return element_.Get(index);
}
inline void MemoryRange_Array::set_element(int index, double value) {
  element_.Set(index, value);
}
inline void MemoryRange_Array::add_element(double value) {
  element_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
MemoryRange_Array::element() const {
  return element_;
}
inline ::google::protobuf::RepeatedField< double >*
MemoryRange_Array::mutable_element() {
  return &element_;
}

// -------------------------------------------------------------------

// MemoryRange

// optional .KemyBuffers.Memory lower = 11;
inline bool MemoryRange::has_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryRange::set_has_lower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryRange::clear_has_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryRange::clear_lower() {
  if (lower_ != NULL) lower_->::KemyBuffers::Memory::Clear();
  clear_has_lower();
}
inline const ::KemyBuffers::Memory& MemoryRange::lower() const {
  return lower_ != NULL ? *lower_ : *default_instance_->lower_;
}
inline ::KemyBuffers::Memory* MemoryRange::mutable_lower() {
  set_has_lower();
  if (lower_ == NULL) lower_ = new ::KemyBuffers::Memory;
  return lower_;
}
inline ::KemyBuffers::Memory* MemoryRange::release_lower() {
  clear_has_lower();
  ::KemyBuffers::Memory* temp = lower_;
  lower_ = NULL;
  return temp;
}

// optional .KemyBuffers.Memory upper = 12;
inline bool MemoryRange::has_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryRange::set_has_upper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryRange::clear_has_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryRange::clear_upper() {
  if (upper_ != NULL) upper_->::KemyBuffers::Memory::Clear();
  clear_has_upper();
}
inline const ::KemyBuffers::Memory& MemoryRange::upper() const {
  return upper_ != NULL ? *upper_ : *default_instance_->upper_;
}
inline ::KemyBuffers::Memory* MemoryRange::mutable_upper() {
  set_has_upper();
  if (upper_ == NULL) upper_ = new ::KemyBuffers::Memory;
  return upper_;
}
inline ::KemyBuffers::Memory* MemoryRange::release_upper() {
  clear_has_upper();
  ::KemyBuffers::Memory* temp = upper_;
  upper_ = NULL;
  return temp;
}

// optional uint32 count = 13;
inline bool MemoryRange::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryRange::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryRange::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryRange::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 MemoryRange::count() const {
  return count_;
}
inline void MemoryRange::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// repeated .KemyBuffers.MemoryRange.Array arrs = 14;
inline int MemoryRange::arrs_size() const {
  return arrs_.size();
}
inline void MemoryRange::clear_arrs() {
  arrs_.Clear();
}
inline const ::KemyBuffers::MemoryRange_Array& MemoryRange::arrs(int index) const {
  return arrs_.Get(index);
}
inline ::KemyBuffers::MemoryRange_Array* MemoryRange::mutable_arrs(int index) {
  return arrs_.Mutable(index);
}
inline ::KemyBuffers::MemoryRange_Array* MemoryRange::add_arrs() {
  return arrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::MemoryRange_Array >&
MemoryRange::arrs() const {
  return arrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::KemyBuffers::MemoryRange_Array >*
MemoryRange::mutable_arrs() {
  return &arrs_;
}

// -------------------------------------------------------------------

// Memory

// optional double ewma_qlen = 21;
inline bool Memory::has_ewma_qlen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Memory::set_has_ewma_qlen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Memory::clear_has_ewma_qlen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Memory::clear_ewma_qlen() {
  ewma_qlen_ = 0;
  clear_has_ewma_qlen();
}
inline double Memory::ewma_qlen() const {
  return ewma_qlen_;
}
inline void Memory::set_ewma_qlen(double value) {
  set_has_ewma_qlen();
  ewma_qlen_ = value;
}

// optional double ewma_arrival_rate = 22;
inline bool Memory::has_ewma_arrival_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Memory::set_has_ewma_arrival_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Memory::clear_has_ewma_arrival_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Memory::clear_ewma_arrival_rate() {
  ewma_arrival_rate_ = 0;
  clear_has_ewma_arrival_rate();
}
inline double Memory::ewma_arrival_rate() const {
  return ewma_arrival_rate_;
}
inline void Memory::set_ewma_arrival_rate(double value) {
  set_has_ewma_arrival_rate();
  ewma_arrival_rate_ = value;
}

// optional double ewma_depart_rate = 23;
inline bool Memory::has_ewma_depart_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Memory::set_has_ewma_depart_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Memory::clear_has_ewma_depart_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Memory::clear_ewma_depart_rate() {
  ewma_depart_rate_ = 0;
  clear_has_ewma_depart_rate();
}
inline double Memory::ewma_depart_rate() const {
  return ewma_depart_rate_;
}
inline void Memory::set_ewma_depart_rate(double value) {
  set_has_ewma_depart_rate();
  ewma_depart_rate_ = value;
}

// -------------------------------------------------------------------

// Whisker

// optional uint32 generation = 31;
inline bool Whisker::has_generation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Whisker::set_has_generation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Whisker::clear_has_generation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Whisker::clear_generation() {
  generation_ = 0u;
  clear_has_generation();
}
inline ::google::protobuf::uint32 Whisker::generation() const {
  return generation_;
}
inline void Whisker::set_generation(::google::protobuf::uint32 value) {
  set_has_generation();
  generation_ = value;
}

// optional bool drop_f = 32;
inline bool Whisker::has_drop_f() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Whisker::set_has_drop_f() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Whisker::clear_has_drop_f() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Whisker::clear_drop_f() {
  drop_f_ = false;
  clear_has_drop_f();
}
inline bool Whisker::drop_f() const {
  return drop_f_;
}
inline void Whisker::set_drop_f(bool value) {
  set_has_drop_f();
  drop_f_ = value;
}

// optional .KemyBuffers.MemoryRange domain = 33;
inline bool Whisker::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Whisker::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Whisker::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Whisker::clear_domain() {
  if (domain_ != NULL) domain_->::KemyBuffers::MemoryRange::Clear();
  clear_has_domain();
}
inline const ::KemyBuffers::MemoryRange& Whisker::domain() const {
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
inline ::KemyBuffers::MemoryRange* Whisker::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) domain_ = new ::KemyBuffers::MemoryRange;
  return domain_;
}
inline ::KemyBuffers::MemoryRange* Whisker::release_domain() {
  clear_has_domain();
  ::KemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// OptimizationSetting

// optional double min_value = 41;
inline bool OptimizationSetting::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizationSetting::set_has_min_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptimizationSetting::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptimizationSetting::clear_min_value() {
  min_value_ = 0;
  clear_has_min_value();
}
inline double OptimizationSetting::min_value() const {
  return min_value_;
}
inline void OptimizationSetting::set_min_value(double value) {
  set_has_min_value();
  min_value_ = value;
}

// optional double max_value = 42;
inline bool OptimizationSetting::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizationSetting::set_has_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptimizationSetting::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptimizationSetting::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
inline double OptimizationSetting::max_value() const {
  return max_value_;
}
inline void OptimizationSetting::set_max_value(double value) {
  set_has_max_value();
  max_value_ = value;
}

// optional double min_change = 43;
inline bool OptimizationSetting::has_min_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptimizationSetting::set_has_min_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OptimizationSetting::clear_has_min_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OptimizationSetting::clear_min_change() {
  min_change_ = 0;
  clear_has_min_change();
}
inline double OptimizationSetting::min_change() const {
  return min_change_;
}
inline void OptimizationSetting::set_min_change(double value) {
  set_has_min_change();
  min_change_ = value;
}

// optional double max_change = 44;
inline bool OptimizationSetting::has_max_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptimizationSetting::set_has_max_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OptimizationSetting::clear_has_max_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OptimizationSetting::clear_max_change() {
  max_change_ = 0;
  clear_has_max_change();
}
inline double OptimizationSetting::max_change() const {
  return max_change_;
}
inline void OptimizationSetting::set_max_change(double value) {
  set_has_max_change();
  max_change_ = value;
}

// optional double multiplier = 45;
inline bool OptimizationSetting::has_multiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptimizationSetting::set_has_multiplier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OptimizationSetting::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OptimizationSetting::clear_multiplier() {
  multiplier_ = 0;
  clear_has_multiplier();
}
inline double OptimizationSetting::multiplier() const {
  return multiplier_;
}
inline void OptimizationSetting::set_multiplier(double value) {
  set_has_multiplier();
  multiplier_ = value;
}

// optional double default_value = 46;
inline bool OptimizationSetting::has_default_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptimizationSetting::set_has_default_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OptimizationSetting::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OptimizationSetting::clear_default_value() {
  default_value_ = 0;
  clear_has_default_value();
}
inline double OptimizationSetting::default_value() const {
  return default_value_;
}
inline void OptimizationSetting::set_default_value(double value) {
  set_has_default_value();
  default_value_ = value;
}

// -------------------------------------------------------------------

// OptimizationSettings

// optional .KemyBuffers.OptimizationSetting drop_f = 51;
inline bool OptimizationSettings::has_drop_f() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizationSettings::set_has_drop_f() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptimizationSettings::clear_has_drop_f() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptimizationSettings::clear_drop_f() {
  if (drop_f_ != NULL) drop_f_->::KemyBuffers::OptimizationSetting::Clear();
  clear_has_drop_f();
}
inline const ::KemyBuffers::OptimizationSetting& OptimizationSettings::drop_f() const {
  return drop_f_ != NULL ? *drop_f_ : *default_instance_->drop_f_;
}
inline ::KemyBuffers::OptimizationSetting* OptimizationSettings::mutable_drop_f() {
  set_has_drop_f();
  if (drop_f_ == NULL) drop_f_ = new ::KemyBuffers::OptimizationSetting;
  return drop_f_;
}
inline ::KemyBuffers::OptimizationSetting* OptimizationSettings::release_drop_f() {
  clear_has_drop_f();
  ::KemyBuffers::OptimizationSetting* temp = drop_f_;
  drop_f_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Range

// optional double low = 61;
inline bool Range::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_low() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_low() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double Range::low() const {
  return low_;
}
inline void Range::set_low(double value) {
  set_has_low();
  low_ = value;
}

// optional double high = 62;
inline bool Range::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double Range::high() const {
  return high_;
}
inline void Range::set_high(double value) {
  set_has_high();
  high_ = value;
}

// -------------------------------------------------------------------

// ConfigRange

// optional .KemyBuffers.Range num_senders = 71;
inline bool ConfigRange::has_num_senders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRange::set_has_num_senders() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRange::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRange::clear_num_senders() {
  if (num_senders_ != NULL) num_senders_->::KemyBuffers::Range::Clear();
  clear_has_num_senders();
}
inline const ::KemyBuffers::Range& ConfigRange::num_senders() const {
  return num_senders_ != NULL ? *num_senders_ : *default_instance_->num_senders_;
}
inline ::KemyBuffers::Range* ConfigRange::mutable_num_senders() {
  set_has_num_senders();
  if (num_senders_ == NULL) num_senders_ = new ::KemyBuffers::Range;
  return num_senders_;
}
inline ::KemyBuffers::Range* ConfigRange::release_num_senders() {
  clear_has_num_senders();
  ::KemyBuffers::Range* temp = num_senders_;
  num_senders_ = NULL;
  return temp;
}

// optional .KemyBuffers.Range bottle_bw = 72;
inline bool ConfigRange::has_bottle_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRange::set_has_bottle_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRange::clear_has_bottle_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRange::clear_bottle_bw() {
  if (bottle_bw_ != NULL) bottle_bw_->::KemyBuffers::Range::Clear();
  clear_has_bottle_bw();
}
inline const ::KemyBuffers::Range& ConfigRange::bottle_bw() const {
  return bottle_bw_ != NULL ? *bottle_bw_ : *default_instance_->bottle_bw_;
}
inline ::KemyBuffers::Range* ConfigRange::mutable_bottle_bw() {
  set_has_bottle_bw();
  if (bottle_bw_ == NULL) bottle_bw_ = new ::KemyBuffers::Range;
  return bottle_bw_;
}
inline ::KemyBuffers::Range* ConfigRange::release_bottle_bw() {
  clear_has_bottle_bw();
  ::KemyBuffers::Range* temp = bottle_bw_;
  bottle_bw_ = NULL;
  return temp;
}

// optional .KemyBuffers.Range bottle_single_delay = 73;
inline bool ConfigRange::has_bottle_single_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigRange::set_has_bottle_single_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigRange::clear_has_bottle_single_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigRange::clear_bottle_single_delay() {
  if (bottle_single_delay_ != NULL) bottle_single_delay_->::KemyBuffers::Range::Clear();
  clear_has_bottle_single_delay();
}
inline const ::KemyBuffers::Range& ConfigRange::bottle_single_delay() const {
  return bottle_single_delay_ != NULL ? *bottle_single_delay_ : *default_instance_->bottle_single_delay_;
}
inline ::KemyBuffers::Range* ConfigRange::mutable_bottle_single_delay() {
  set_has_bottle_single_delay();
  if (bottle_single_delay_ == NULL) bottle_single_delay_ = new ::KemyBuffers::Range;
  return bottle_single_delay_;
}
inline ::KemyBuffers::Range* ConfigRange::release_bottle_single_delay() {
  clear_has_bottle_single_delay();
  ::KemyBuffers::Range* temp = bottle_single_delay_;
  bottle_single_delay_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetConfig

// optional uint32 num_senders = 1;
inline bool NetConfig::has_num_senders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig::set_has_num_senders() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig::clear_has_num_senders() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig::clear_num_senders() {
  num_senders_ = 0u;
  clear_has_num_senders();
}
inline ::google::protobuf::uint32 NetConfig::num_senders() const {
  return num_senders_;
}
inline void NetConfig::set_num_senders(::google::protobuf::uint32 value) {
  set_has_num_senders();
  num_senders_ = value;
}

// optional double bottle_bw = 2;
inline bool NetConfig::has_bottle_bw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetConfig::set_has_bottle_bw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetConfig::clear_has_bottle_bw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetConfig::clear_bottle_bw() {
  bottle_bw_ = 0;
  clear_has_bottle_bw();
}
inline double NetConfig::bottle_bw() const {
  return bottle_bw_;
}
inline void NetConfig::set_bottle_bw(double value) {
  set_has_bottle_bw();
  bottle_bw_ = value;
}

// optional double bottle_single_delay = 3;
inline bool NetConfig::has_bottle_single_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetConfig::set_has_bottle_single_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetConfig::clear_has_bottle_single_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetConfig::clear_bottle_single_delay() {
  bottle_single_delay_ = 0;
  clear_has_bottle_single_delay();
}
inline double NetConfig::bottle_single_delay() const {
  return bottle_single_delay_;
}
inline void NetConfig::set_bottle_single_delay(double value) {
  set_has_bottle_single_delay();
  bottle_single_delay_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KemyBuffers

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dna_2eproto__INCLUDED
